{#- get dict of user configurations -#}
{%- set brave = salt['pillar.get']('tool:brave', {'users': {}}, merge=True) -%}
{%- set users = {} -%}

{%- set version = brave.get('version', 'stable') -%}

{%- set suffix = '' if 'stable' == version else ' ' ~ version | capitalize -%}

{#- @TODO windows/rpm/bsd, probably C:/Program Files/Chromium or Program Files (x86).
    note: seems like the latter was default previously, but now the former is correct -#}
{%- set installation_path = salt['grains.filter_by']({
  'Darwin': '/Applications/Brave Browser{}.app'.format(suffix),
  'Windows': 'C:/Program Files/BraveSoftware/Brave-Browser{}'.format(suffix | replace(' ', '-')),
  'default': '/opt/brave.com/brave{}'.format(suffix | lower | replace(' ', '-'))
  }, 'kernel') -%}

{%- set bin_path = salt['grains.filter_by']({
  'Darwin': installation_path ~ '/Contents/MacOS/Brave Browser',
  'Windows': installation_path ~ '/Application/brave.exe',
  'Linux': '/usr/bin/brave-browser{}'.format(suffix | lower | replace(' ', '-')),
  }, 'kernel') -%}

{%- set default_conf_dir = salt['match.filter_by'](salt['grains.filter_by']({
  'Windows': {
    'stable': '/AppData/Local/BraveSoftware/Brave-Browser/User Data',
    'beta': '/AppData/Local/BraveSoftware/Brave-Browser-Beta/User Data',
    'nightly': '/AppData/Local/BraveSoftware/Brave-Browser-Nightly/User Data',
  },
  'Darwin': {
    'stable': '/Library/Application Support/BraveSoftware/Brave-Browser',
    'beta': '/Library/Application Support/BraveSoftware/Brave-Browser-Beta',
    'nightly': '/Library/Application Support/BraveSoftware/Brave-Browser-Nightly',
  },
  'Linux': {
    'stable': '/.config/brave-browser # actually XDG_CONFIG_HOME',
    'beta': '/.config/brave-browser-beta',
    'nightly': '/.config/brave-browser-nightly',
  }}, 'kernel'), minion_id=version) -%}


{%- do brave.update({'_path': installation_path, '_bin': bin_path, 'version': version}) -%}

{%- load_yaml as extensions_default -%}
installation_mode: normal_installed
update_url: https://clients2.google.com/service/update2/crx
{%- endload -%}

{%- set extensions_default = salt['defaults.merge'](extensions_default, brave.get('ext_defaults', {}), in_place=False) -%}

{%- set policies = brave.get('policies', {}) -%}

{%- if brave.get('extensions') -%}
  {# parse extensions. allows to specify pre-defined extensions by name
     instead of looking up ID -#}
  {%- set extensions_data = {} -%}
  {%- set local_extensions = {} -%}
  {%- for extension in brave.extensions -%}
    {%- set extension_config = {} -%}
    {%- if extension is mapping -%}
      {%- set extension_name = extension.keys() | list | first -%}
      {#- need to deepcopy because we might pop 'local' settings, which will seem to work, but
          will make imports not contain local extension settings -#}
      {%- set extension_config = salt['defaults.deepcopy'](extension[extension_name]) -%}
    {%- else -%}
      {%- set extension_name = extension -%}
    {%- endif -%}
    {%- import_yaml "tool-brave/policies/extensions/" + extension_name + ".yml" as data -%}
    {%- if extension_config.get('local', False) -%}
      {%- do local_extensions.update({extension_name: {'id': data.keys() | first, 'v': extension_config.local_version}}) -%}
      {%- do extension_config.update({'update_url': 'file://' ~ brave.ext_local_source ~ '/update'}) -%}
      {%- do extension_config.update({'override_update_url': True}) -%}
      {%- do extension_config.pop('local') -%}
      {%- do extension_config.pop('local_version') -%}
    {%- endif -%}
    {%- set extension_default = salt['defaults.merge'](extensions_default, data[data.keys() | list | first], in_place=False) -%}
    {%- set extension_config = salt['defaults.merge'](extension_default, extension_config, in_place=False) -%}
    {%- do data[data.keys() | list | first].update(extension_config) -%}
    {%- do extensions_data.update(data) -%}
  {%- endfor -%}
  {%- do brave.update({'_local_extensions': local_extensions}) -%}
  {%- set policies = salt['defaults.merge'](policies, {'forced' if brave.get('ext_forced') else 'recommended': {'ExtensionSettings': extensions_data}}, in_place=False) -%} {# for whatever reason, this does not work in_place -#}
  {%- if local_extensions -%}
    {%- do policies | append_dict_key_value('forced:ExtensionInstallSources', 'file://{}/*'.format(brave.ext_local_source)) -%}
  {%- endif -%}
{%- endif -%}

{#- https://support.google.com/chrome/a/answer/7532015 -#}
{%- if policies and 'Windows' == grains['kernel'] -%}
  {%- if policies | traverse("recommended:ExtensionSettings") -%}
    {%- do policies.recommended.update({'ExtensionSettings': policies.recommended.ExtensionSettings | json}) -%}
  {%- endif -%}
  {%- if policies | traverse("forced:ExtensionSettings") -%}
    {%- do policies.forced.update({'ExtensionSettings': policies.forced.ExtensionSettings | json}) -%}
  {%- endif -%}
{%- endif -%}

{%- do brave.update({'_policies': policies}) -%}

{%- set global_user_settings = ['brave'] %}

{#- rejectattr filter does not fit with mapping. need to filter out users before merging default values -#}
{%- for tool_user, tool_user_conf in salt['pillar.get']('tool:users', {}).items() -%}
{#- by default, install tool if it was targeted. explicitly deny for a specific user to override -#}
  {%- if tool_user_conf.get('brave', True) -%}
    {%- do users.update({tool_user: {'brave': {}}}) %}
    {%- for global_setting in global_user_settings %}
      {%- if tool_user_conf.get(global_setting) is not equalto None %}
        {%- do users[tool_user].update({global_setting: salt['defaults.deepcopy'](tool_user_conf[global_setting])}) %}
      {%- endif %}
    {%- endfor %}
  {%- endif -%}
{%- endfor -%}

{%- do salt['defaults.merge'](users, brave.get('users', {})) -%}

{#- update all user configuration for brave with its defaults -#}
{%- do salt['defaults.update'](users, {'brave': brave.get('defaults', {})}) -%}

{#- embed user information that will be reused (home, primary group, shell, paths) -#}
{%- for user in users.keys() -%}
  {%- do users[user].update({'_brave': {}}) -%}
  {%- do users[user].update({'name': user}) -%}
  {%- set user_info = salt['user.info'](user) -%}
  {%- load_yaml as user_info -%}
group: {{ salt['user.primary_group'](user) }}
home: {{ user_info.home }}
shell: {{ user_info.shell.split('/')[-1] }}
  {%- endload -%}
  {%- do users[user].update(salt['defaults.merge'](user_info, users[user], in_place=False)) -%}
  {%- do users[user]['_brave'].update({'confdir': user_info.home ~ default_conf_dir}) -%}
{%- endfor -%}

{%- do brave.update({'users': users.values() | list}) -%}
